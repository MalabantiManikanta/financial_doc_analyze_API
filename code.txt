
# pdf_api/views.py
import fitz  # PyMuPDF
import pytesseract
from pdf2image import convert_from_path
from django.core.files.storage import default_storage
from rest_framework.response import Response
from rest_framework.decorators import api_view
from .models import PDFDocument
from pdf_analyzer.serializers import PDFDocumentSerializer
import traceback
# pdf_analyzer/views.py
from django.shortcuts import get_object_or_404
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import PDFDocument
from pdf_analyzer.analyzer import analyze_financial_text  # Import the function

@api_view(['POST'])
def analyze_pdf_text(request):
    """
    API endpoint to analyze extracted PDF text using a financial model.
    
    Expects:
    - query: User's question about financial insights (e.g., "Will the share price increase?")
    - pdf_id: ID of the uploaded PDF file

    Returns:
    - Analysis result from the financial model
    """
    query = request.data.get("query")
    pdf_id = request.data.get("pdf_id")

    if not query or not pdf_id:
        return Response({"error": "Both 'query' and 'pdf_id' are required."}, status=400)

    # Fetch the PDF instance
    pdf_instance = get_object_or_404(PDFDocument, id=pdf_id)

    # Use the full extracted text for analysis
    extracted_text = pdf_instance.extracted_text
    if not extracted_text:
        return Response({"error": "No extracted text found for the selected PDF."}, status=400)

    # Analyze the text using the financial model
    analysis_result = analyze_financial_text(query, extracted_text)

    return Response({"query": query, "analysis": analysis_result})


@api_view(['POST'])
def upload_pdf(request):
    """Upload PDF and extract text using PyMuPDF & OCR."""
    try:
        file = request.FILES.get('file')
        if not file:
            return Response({'error': 'No file uploaded'}, status=400)

        pdf_instance = PDFDocument.objects.create(file=file)
        file_path = default_storage.save('uploads/' + file.name, file)
        file_path = default_storage.path(file_path)
        # This might be causing the error
        extracted_text = extract_text_from_pdf(file_path)

        pdf_instance.extracted_text = extracted_text
        pdf_instance.save()
        return Response(PDFDocumentSerializer(pdf_instance).data)

    except Exception as e:
        error_message = str(e)
        traceback.print_exc()  # Logs error in terminal
        return Response({'error': error_message}, status=500)

import re

def extract_text_from_pdf(file_path):
    """Extract text using both PyMuPDF and OCR for maximum data extraction, removing extra spaces and newlines."""
    text = []
    doc = fitz.open(file_path)

    for page in doc:
        text.append(page.get_text("text"))  # Extract plain text
        text.extend([block[4] for block in page.get_text("blocks")])  # Extract block text
        text.extend([word[4] for word in page.get_text("words")])  # Extract words

    if not "".join(text).strip():  # If PyMuPDF fails, use OCR
        images = convert_from_path(file_path)
        for img in images:
            text.append(pytesseract.image_to_string(img))

    # Remove extra spaces, newlines, and normalize text
    cleaned_text = " ".join(text)
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text).strip()  # Replace multiple spaces/newlines with a single space
    
    return cleaned_text

# pdf_api/serializers.py
from rest_framework import serializers
from .models import PDFDocument

class PDFDocumentSerializer(serializers.ModelSerializer):
    class Meta:
        model = PDFDocument
        fields = '__all__'
from django.db import models

# Create your models here.
# pdf_api/models.py


class PDFDocument(models.Model):
    file = models.FileField(upload_to='uploads/')
    extracted_text = models.TextField(blank=True, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.file.name
# pdf_analyzer/analyzer.py
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load the financial question-answering model from Hugging Face
MODEL_NAME = "MayaPH/FinOPT-Franklin"  # Financial text analysis model
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForCausalLM.from_pretrained(MODEL_NAME)

def analyze_financial_text(query, extracted_text):
    """
    Analyze the extracted financial text based on the user's query.

    :param query: User's question (e.g., "Will the stock price increase?")
    :param extracted_text: Complete extracted text from the PDF
    :return: Model-generated analysis response
    """
    input_text = f"Question: {query}\nContext: {extracted_text}"
    inputs = tokenizer.encode(input_text, return_tensors="pt")
    outputs = model.generate(inputs, max_length=250)  # Adjust max length if needed
    result = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return result
from django.contrib import admin
from django.urls import path, include
from django.http import JsonResponse
from pdf_analyzer.views import upload_pdf,analyze_pdf_text
def home(request):
    return JsonResponse({"message": "Welcome to Share Price Prediction using LLM!"})

urlpatterns = [
    path("", home, name="home"),
    path('upload/', upload_pdf, name='upload_pdf'),
    path('analyze/', analyze_pdf_text, name='analyze_pdf_text'),
]
import os
from pathlib import Path
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key (use environment variable)
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "your-secret-key")

# Debug mode
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "pdf_analyzer",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "pdf_api.urls"
WSGI_APPLICATION = "pdf_api.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True
STATIC_ROOT = BASE_DIR / "staticfiles"

CORS_ALLOWED_ORIGINS = ["http://localhost:8501"]
DATA_UPLOAD_MAX_MEMORY_SIZE = 200 * 1024 * 1024  # 200MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 200 * 1024 * 1024  # 200MB

STATIC_URL = "static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
import streamlit as st
import requests

# API Endpoints
UPLOAD_URL = "http://127.0.0.1:8000/upload/"
ANALYSIS_URL = "http://127.0.0.1:8000/analyze/"

def upload_pdf(file):
    """Uploads the PDF to the Django API and returns extracted text."""
    files = {"file": file}
    response = requests.post(UPLOAD_URL, files=files)
    
    # Debugging: Print raw response
    st.write("Response Status Code:", response.status_code)
    st.write("Response Text:", response.text)

    try:
        return response.json()
    except requests.exceptions.JSONDecodeError:
        return {"error": "Invalid JSON response from the server"}

# Streamlit UI
st.title("📄 PDF Text Extraction & Financial Analysis App")
st.write("Upload a PDF file to extract text and analyze financial insights.")

# File Upload Section
uploaded_file = st.file_uploader("Choose a PDF file", type=["pdf"])

if uploaded_file:
    st.success(f"Uploaded File: {uploaded_file.name}")

    if st.button("Extract Text"):
        with st.spinner("Extracting text..."):
            result = upload_pdf(uploaded_file)

        if "error" in result:
            st.error("Error: " + result["error"])
        else:
            pdf_id = result.get("id")  # Store PDF ID for analysis
            extracted_text = result.get("extracted_text", "No text extracted.")

            st.subheader("📜 Extracted Text Preview")
            st.text_area("Extracted Content", extracted_text[:1000], height=300)  # Show a preview of extracted text

            # User Input for Financial Analysis
            st.subheader("📊 Financial Analysis")
            user_query = st.text_input("Enter a financial query (e.g., 'Will the stock price increase?')")

            if user_query:
                with st.spinner("Analyzing..."):
                    analysis_payload = {"query": user_query, "pdf_id": pdf_id}
                    analysis_response = requests.post(ANALYSIS_URL, json=analysis_payload)

                if analysis_response.status_code == 200:
                    analysis_result = analysis_response.json().get("analysis", "No analysis available.")
                    st.success("✅ Analysis Complete!")
                    st.write("📌 **Query:**", user_query)
                    st.write("🔍 **Analysis Result:**", analysis_result)
                else:
                    st.error("Error during analysis. Please try again.")

st.write("Developed with ❤️ using Django & Streamlit")
